import java.net.URLEncoder

fun sendSmsTwilio(variables: Map<String, String>, receiver: String?, message: String?): Map<String, Any>{

    val accountID = variables.get("TWILIO_ACCOUNT_SID")
    val auth_token = variables.get("TWILIO_AUTH_TOKEN")
    val sender = variables.get("TWILIO_SENDER")

    
    if (accountID == null || accountID.isEmpty()) {
        return mapOf("success" to false, "message" to "Account ID is not set")
    }

    if (auth_token == null || auth_token.isEmpty()) {
        return mapOf("success" to false, "message" to "Auth token is not set")
    }

    if (sender == null || sender.isEmpty()) {
        return mapOf("success" to false, "message" to "Sender is not set")
    }

    try {
        val url = URL("https://api.twilio.com/2010-04-01/Accounts/$accountID/Messages.json")
        val connection = url.openConnection() as HttpURLConnection
        connection.doOutput = true
        connection.requestMethod = "POST"
        connection.setRequestProperty("Content-Type", "application/json")
        connection.setRequestProperty("Authorization", "Basic ${URLEncoder.encode(auth_token, "UTF-8")}")
    
    
        val postData = "{\"From\": \"$sender\", \"To\": \"$receiver\", \"Body\": \"$message\"}"
            
    
        println(postData)
    
        val outputStream = connection.outputStream
        outputStream.write(postData.toByteArray(Charsets.UTF_8))
    
        val responseCode: Int = connection.responseCode
        val responseMessage = connection.responseMessage
    
        outputStream.close()
        connection.disconnect()
    
        if (responseCode != 200) {
            return mapOf("success" to false, "message" to "Error: #$responseCode  - > $responseMessage")
        } 

        return mapOf("success" to true, "message" to "Message sent!")
    } catch (e: Exception) {
        return mapOf("success" to false, "message" to "Error: ${e.message}")
    }
    
    return mapOf("success" to true, "message" to "Message sent!")
}
